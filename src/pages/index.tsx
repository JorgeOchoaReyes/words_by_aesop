import Head from "next/head";
import React from "react";   
import { api } from "~/utils/api";

export default function Home() { 
  const findPhonemes = api.rhymes.findPhonemes.useMutation(); 
  const [currentText, setCurrentText] = React.useState<string>(""); 
  const [phonoticParagraph, setPhonoticParagraph] = React.useState<Record<string, string>>({});
  const [phonoticsAsMatchingColors, setPhonoticsAsMatchingColors] = React.useState<Record<string, string>>({} as Record<string, string>);
  const cleanText = (text: string) => {
    return text.replaceAll("\n", " ").replaceAll("\t", " ").replaceAll("  ", " ");
  };
  const checkIfColorIsDark = (hex: string) => {
    const c = hex.substring(1);
    const rgb = parseInt(c, 16);
    const r = (rgb >> 16) & 0xff;
    const g = (rgb >>  8) & 0xff;
    const b = (rgb >>  0) & 0xff;
    const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;
    return luma < 40;
  };  
  return (  
    <>
      <Head>
        <title>Aesop</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b bg-slate-300">
        <h1 className="text-5xl font-bold mb-10">
          Words by Aesop
        </h1>
        <div className="container flex flex-col items-center justify-center h-full"> 
          <textarea   
            placeholder="Type here" 
            className="textarea w-full max-w-xl mb-10"
            value={currentText}
            onChange={async (e) => {  
              if(e.target.value.endsWith(" ") || e.target.value.endsWith("\n")) {
                setCurrentText(cleanText(e.target.value));  
                const res = await findPhonemes.mutateAsync({ text: cleanText(e.target.value) }); 
                if(res.words) {
                  Object.keys(res.words).forEach((word) => {
                    const newPhonotic = (res.words[word] ?? ""); 
                    const splitPhonotic = newPhonotic.split(" "); 
                    splitPhonotic.forEach((phonotic) => {
                      console.log(phonotic);
                      if(!phonoticsAsMatchingColors[phonotic]) {  
                        phonoticsAsMatchingColors[phonotic] = `#${Math.floor(Math.random()*16777215).toString(16)}`; 
                      } 
                    }); 
                    setPhonoticsAsMatchingColors({
                      ...phonoticsAsMatchingColors, 
                    });
                  }); 
                  setPhonoticParagraph(res.words);
                } 
                return;
              }  
              
              setCurrentText(cleanText(e.target.value));  
            }} 
          />   
          <button className="btn btn-success w-[25%] mb-10"
            onClick={async () => {
              setCurrentText(cleanText(currentText));  
              const res = await findPhonemes.mutateAsync({ text: cleanText(currentText) }); 
              if(res.words) {
                Object.keys(res.words).forEach((word) => {
                  const newPhonotic = (res.words[word] ?? ""); 
                  const splitPhonotic = newPhonotic.split(" "); 
                  splitPhonotic.forEach((phonotic) => {
                    if(!phonoticsAsMatchingColors[phonotic]) { 
                      phonoticsAsMatchingColors[phonotic] = `#${Math.floor(Math.random()*16777215).toString(16)}`;
                    }  
                  });
                  setPhonoticsAsMatchingColors({
                    ...phonoticsAsMatchingColors, 
                  });
                }); 
                setPhonoticParagraph(res.words);
              } 
            }}
          > 
            Check
          </button>
          <div className="w-3/4 flex-col justify-center items-center">
            {
              findPhonemes.isPending ? <span className="loading loading-spinner loading-lg"></span> : null
            } 
            <div style={{
              display: "grid",
              gridTemplateColumns: "2fr 2fr 2fr 2fr 2fr 2fr 2fr 2fr",
              width: "100%", 
              justifyContent: "start",
            }}> 
              {
                cleanText(currentText).split(" ").map((word, index) => {
                  const phonotics = phonoticParagraph[word];
                  const colorPhontics = phonotics?.split(" ").map((phonotic) => {
                    const textWhite = checkIfColorIsDark(phonoticsAsMatchingColors[phonotic] ?? "") ? "text-white" : "text-white";
                    return <span className={textWhite} key={phonotic} style={{backgroundColor: phonoticsAsMatchingColors[phonotic], marginLeft: 3}}>{phonotic}</span>;
                  }); 

                  return <div key={index} className="flex flex-col mx-2">
                    <div key={word} className="text-lg text-center">{word}  </div>   
                    <div className="text-lg text-center ml-1"> {colorPhontics}</div>
                  </div>;
                })
              }
            </div>
  
          </div>
        </div>
      </main>
    </>
  );
}

 